{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst algoliasearch = require('algoliasearch');\n\nconst algolia = algoliasearch('2S0C9OYKM6', process.env.ALGOLIA_ADMIN_API_KEY); // const index = algolia.initIndex('pages');\n\nconst devIndex = algolia.index('dev_laurens');\nexport default (async (req, res) => {\n  if (req.method !== 'POST') return res.end();\n  if (req.headers['authorization'] !== process.env.WEBHOOK_SECRET_KEY) return res.status(401).end();\n\n  try {\n    const {\n      data: {\n        PUBLISHED\n      }\n    } = req.body;\n\n    const {\n      id: objectID\n    } = PUBLISHED,\n          data = _objectWithoutProperties(PUBLISHED, [\"id\"]);\n\n    await devIndex.saveObject(_objectSpread({\n      objectID\n    }, data));\n    res.send(201);\n  } catch (err) {\n    res.status(400).send(err === null || err === void 0 ? void 0 : err.message);\n  }\n});","map":{"version":3,"sources":["/Users/laurensfranken/sites/with-algolia/pages/api/webhook.js"],"names":["algoliasearch","require","algolia","process","env","ALGOLIA_ADMIN_API_KEY","devIndex","index","req","res","method","end","headers","WEBHOOK_SECRET_KEY","status","data","PUBLISHED","body","id","objectID","saveObject","send","err","message"],"mappings":";;;;;;;;;;AAAA,MAAMA,aAAa,GAAGC,OAAO,CAAC,eAAD,CAA7B;;AAEA,MAAMC,OAAO,GAAGF,aAAa,CAAC,YAAD,EAAeG,OAAO,CAACC,GAAR,CAAYC,qBAA3B,CAA7B,C,CAEA;;AACA,MAAMC,QAAQ,GAAGJ,OAAO,CAACK,KAAR,CAAc,aAAd,CAAjB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B,OAAOD,GAAG,CAACE,GAAJ,EAAP;AAE3B,MAAIH,GAAG,CAACI,OAAJ,CAAY,eAAZ,MAAiCT,OAAO,CAACC,GAAR,CAAYS,kBAAjD,EACE,OAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBH,GAAhB,EAAP;;AAEF,MAAI;AACF,UAAM;AACJI,MAAAA,IAAI,EAAE;AAAEC,QAAAA;AAAF;AADF,QAEFR,GAAG,CAACS,IAFR;;AAIA,UAAM;AAAEC,MAAAA,EAAE,EAAEC;AAAN,QAA4BH,SAAlC;AAAA,UAAyBD,IAAzB,4BAAkCC,SAAlC;;AAEA,UAAMV,QAAQ,CAACc,UAAT;AAAsBD,MAAAA;AAAtB,OAAmCJ,IAAnC,EAAN;AAEAN,IAAAA,GAAG,CAACY,IAAJ,CAAS,GAAT;AACD,GAVD,CAUE,OAAOC,GAAP,EAAY;AACZb,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqBC,GAArB,aAAqBA,GAArB,uBAAqBA,GAAG,CAAEC,OAA1B;AACD;AACF,CAnBD","sourcesContent":["const algoliasearch = require('algoliasearch');\n\nconst algolia = algoliasearch('2S0C9OYKM6', process.env.ALGOLIA_ADMIN_API_KEY);\n\n// const index = algolia.initIndex('pages');\nconst devIndex = algolia.index('dev_laurens')\n\nexport default async (req, res) => {\n  if (req.method !== 'POST') return res.end();\n\n  if (req.headers['authorization'] !== process.env.WEBHOOK_SECRET_KEY)\n    return res.status(401).end();\n\n  try {\n    const {\n      data: { PUBLISHED },\n    } = req.body;\n\n    const { id: objectID, ...data } = PUBLISHED;\n\n    await devIndex.saveObject({ objectID, ...data });\n\n    res.send(201);\n  } catch (err) {\n    res.status(400).send(err?.message);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}